-- Finalized Questions and Queries:


-- Q1：Find the professor id with the lowest average teaching grade and the professor id with the highest average teaching score. (teaching score: average of all the course rating scores that teach by one professor)

-- lowest-
SELECT fact_id, AVG(rate_score)
FROM Rates r, Courses c, Teach t
WHERE r.dept_id=c.dept_id AND r.course_id=c.course_id AND t.dept_id=c.dept_id AND t.course_id=c.course_id
GROUP BY fact_id
ORDER BY AVG(rate_score)
LIMIT 1;

-- highest-
SELECT fact_id, AVG(rate_score)
FROM Rates r, Courses c, Teach t
WHERE r.dept_id=c.dept_id AND r.course_id=c.course_id AND t.dept_id=c.dept_id AND t.course_id=c.course_id
GROUP BY fact_id
ORDER BY AVG(rate_score) DESC
LIMIT 1;





-- Q2: Find the student who makes the most posts in the INSY-660 thread.

SELECT S.stud_fname, S.stud_lname, COUNT(*) AS num_post
FROM Threads T, Posts P, Students S
WHERE T.thread_id=P.thread_id AND S.stud_id=P.stud_id AND T.thread_title='INSY-660'
GROUP BY P.stud_id
ORDER BY num_post DESC
LIMIT 1;


-- Q3: Identify the average grade for the students who have joined the study thread is higher than the students who have not joined the study thread.

SELECT AVG(stud_gpa) AS avg_gpa_in_study_thread
FROM Students ss, Stud_join sj, Threads t, Study sy
WHERE ss.stud_id=sj.stud_id AND sj.thread_id=t.thread_id AND ss.stud_id=sy.stud_id AND t.thread_title='study';

SELECT AVG(stud_gpa) AS avg_gpa_notin_study_thread
FROM Study
WHERE stud_id NOT IN (SELECT DISTINCT ss.stud_id
FROM Students ss, Stud_join sj, Threads t, Study sy
WHERE ss.stud_id=sj.stud_id AND sj.thread_id=t.thread_id AND ss.stud_id=sy.stud_id AND t.thread_title='study');




-- Q4. List the 3 threads with the most recent activity.

SELECT thread_title, MAX(post_timestamp) AS latest_activity
FROM Threads T JOIN Posts P ON P.thread_id=T.thread_id
GROUP BY T.thread_id
ORDER BY latest_activity DESC
LIMIT 3;







-- Q5 List the top five companies with the most alumni in each industry

SELECT Industries.industry_name AS Industry_Name, Alumni.alum_companyname AS Company_Name, COUNT(DISTINCT Alumni.alum_id) AS Alumni_Count
        FROM Industries
        JOIN Worked_in ON Industries.industry_id = Worked_in.industry_id
        JOIN Alumni ON Worked_in.alum_id = Alumni.alum_id
        GROUP BY Industries.industry_name, Alumni.alum_companyname
        HAVING Alumni_Count >= 2
        ORDER BY Industries.industry_name, Alumni_Count DESC
        LIMIT 5;



-- Q6 List the companies that have hired alumni from at least two different cohorts

SELECT alum_companyname AS Company, COUNT(DISTINCT mmaCo_id) AS Alumni_Hired
        FROM Alumni
        GROUP BY alum_companyname
        HAVING Alumni_Hired >= 2;






-- Q7: List the alumni who have joined threads related to their current industry

SELECT CONCAT(Alumni.alum_fname, ' ', Alumni.alum_lname) AS Alumni_Name,
               Alumni.alum_companyname AS Company_Name,
               Industries.industry_name AS Industry,
               Threads.thread_title AS Thread_Title
        FROM Alumni
        JOIN Worked_in ON Alumni.alum_id = Worked_in.alum_id
        JOIN Industries ON Worked_in.industry_id = Industries.industry_id
        JOIN Alum_join ON Alumni.alum_id = Alum_join.alum_id
        JOIN Threads ON Alum_join.thread_id = Threads.thread_id
        ORDER BY Alumni_Name;




-- Q8 Identify the most popular course in each department and list the course average grade.

SELECT
    Departments.dept_name AS Department,
    Courses.course_name AS Course_Name,
    CONCAT(Courses.dept_id, Courses.course_id) AS Course_Number,
    COUNT(Study.stud_id) AS Enrollment_Count,
    AVG(Study.stud_gpa) AS Average_Grade
FROM Study
JOIN Courses ON Study.dept_id = Courses.dept_id AND Study.course_id = Courses.course_id
JOIN Departments ON Study.dept_id = Departments.dept_id
JOIN (
    SELECT dept_id, course_id
    FROM Study
    GROUP BY dept_id, course_id
    HAVING COUNT(*) = (
        SELECT MAX(enrollment_count)
        FROM (
            SELECT dept_id, course_id, COUNT(*) AS enrollment_count
            FROM Study
            GROUP BY dept_id, course_id
        ) AS CoursePop
        WHERE CoursePop.dept_id = Study.dept_id
    )
) AS MaxEnrollment ON Study.dept_id = MaxEnrollment.dept_id AND Study.course_id = MaxEnrollment.course_id
GROUP BY Department, Course_Number, Course_Name
ORDER BY Department;



-- Q9 Find the course with the highest average in each department and show the name of the professor and TA.

SELECT dept_id, course_id, sem_year, fact_fname, fact_lname
            FROM (
                SELECT s.dept_id, s.course_id, s.sem_year, s.average_grade,
                       @rank := IF(@prev_dept = s.dept_id, @rank + 1, 1) AS 'highest',
                       @prev_dept := s.dept_id,
                       p.fact_fname, p.fact_lname
                FROM (
                    SELECT dept_id, course_id, sem_year, AVG(stud_gpa) AS average_grade 
                    FROM Study
                    GROUP BY dept_id, course_id, sem_year
                    ORDER BY dept_id, average_grade DESC
                ) s
                LEFT JOIN (
                    SELECT t.dept_id, t.course_id, t.sem_year, f.fact_fname, f.fact_lname 
                    FROM Teach t
                    LEFT JOIN Faculties f USING(fact_id)
                ) p ON (p.dept_id = s.dept_id) AND (p.course_id = s.course_id) AND (p.sem_year = s.sem_year),
                (SELECT @rank := 0, @prev_dept := NULL) r
            ) gg
            WHERE highest = 1;



-- Q10: Identify the tread that is most consistently active. (the time interval between the first person joining and the last person joining)

SELECT thread_id, thread_title, time_interval FROM (
    SELECT thread_id, thread_title, TIMESTAMPDIFF(DAY, MIN(join_time), MAX(join_time)) AS 'time_interval'
    FROM (
        SELECT thread_id, thread_title, fact_join_date_time AS 'join_time', fact_id AS 'member'
        FROM Threads
        LEFT JOIN Fact_join USING(thread_id)
        UNION ALL
        SELECT thread_id, thread_title, alum_join_date_time AS 'join_time', alum_id AS 'member'
        FROM Threads
        LEFT JOIN Alum_join USING(thread_id)
        UNION ALL
        SELECT thread_id, thread_title, stud_join_date_time AS 'join_time', stud_id AS 'member'
        FROM Threads
        LEFT JOIN Stud_join USING(thread_id)
    ) a
    GROUP BY thread_id, thread_title
) f
WHERE time_interval = (
    SELECT MAX(time_interval)
    FROM (
        SELECT thread_id, thread_title, TIMESTAMPDIFF(DAY, MIN(join_time), MAX(join_time)) AS 'time_interval'
        FROM (
            SELECT thread_id, thread_title, fact_join_date_time AS 'join_time', fact_id AS 'member'
            FROM Threads
            LEFT JOIN Fact_join USING(thread_id)
            UNION ALL
            SELECT thread_id, thread_title, alum_join_date_time AS 'join_time', alum_id AS 'member'
            FROM Threads
            LEFT JOIN Alum_join USING(thread_id)
            UNION ALL
            SELECT thread_id, thread_title, stud_join_date_time AS 'join_time', stud_id AS 'member'
            FROM Threads
            LEFT JOIN Stud_join USING(thread_id)
        ) a
        GROUP BY thread_id, thread_title
    ) f2
);



-- Q11 Display the courses where the average GPA of students is above 3.3.

SELECT c.dept_id, c.course_id, c.course_name, s.sem_year, ROUND(AVG(s.stud_gpa), 2) AS 'average_grade'
        FROM Courses c
        LEFT JOIN Study s ON (c.dept_id = s.dept_id) AND (c.course_id = s.course_id)
        GROUP BY c.dept_id, c.course_id, c.course_name, s.sem_year
        HAVING average_grade >= 3.3
        ORDER BY average_grade DESC;



-- Q12: Identify the students who have the most connections.

SELECT stud_id, stud_fname, stud_lname, number_of_connect FROM (
    SELECT stud_id, COUNT(DISTINCT fact_id) + COUNT(DISTINCT alum_id) AS 'number_of_connect'
    FROM Stud_join
    LEFT JOIN Alum_join USING(thread_id)
    LEFT JOIN Fact_join USING(thread_id)
    GROUP BY stud_id
) c
LEFT JOIN Students USING(stud_id)
WHERE number_of_connect = (
    SELECT MAX(number_of_connect)
    FROM (
        SELECT stud_id, COUNT(DISTINCT fact_id) + COUNT(DISTINCT alum_id) AS 'number_of_connect'
        FROM Stud_join
        LEFT JOIN Alum_join USING(thread_id)
        LEFT JOIN Fact_join USING(thread_id)
        GROUP BY stud_id
    ) c1
);








-- Q13: Determine the most common industry interest among students with GPA >= 3.5 in each course.

SELECT 
    industry_name,
    CONCAT(CAST(ROUND(proportion * 100, 2) AS CHAR), '%') AS ProportionOfHighGPAStudents,
    ROUND(AvgGPA, 2) AS AvgGPA
FROM (
    SELECT 
        Industries.industry_name,
        COUNT(DISTINCT h.stud_id) * 1.0 / (
            SELECT COUNT(DISTINCT Students.stud_id)
            FROM Students
            JOIN Study ON Students.stud_id = Study.stud_id
            WHERE Study.stud_gpa IS NOT NULL AND Study.stud_gpa >= 3.5
        ) AS proportion,
        AVG(h.max_gpa) AS AvgGPA
    FROM (
        SELECT 
            Students.stud_id AS stud_id,
            Students.stud_fname,
            Students.stud_lname,
            ROUND(MAX(Study.stud_gpa), 2) AS max_gpa
        FROM 
            Students
        JOIN 
            Study ON Students.stud_id = Study.stud_id
        WHERE 
            Study.stud_gpa IS NOT NULL AND Study.stud_gpa >= 3.5
        GROUP BY 
            Students.stud_id,
            Students.stud_fname,
            Students.stud_lname
    ) AS h
    LEFT JOIN Interested_in ON Interested_in.stud_id = h.stud_id
    LEFT JOIN Industries ON Interested_in.industry_id = Industries.industry_id
    WHERE
        Industries.industry_name IS NOT NULL
    GROUP BY Industries.industry_name
) AS InnerQuery
ORDER BY 
    InnerQuery.proportion DESC,
    InnerQuery.industry_name ASC,
    InnerQuery.AvgGPA DESC;






-- Q14: Find the top three courses with the highest rate scores in each department.

SELECT 
        d.dept_id,
        d.dept_name,
        r.course_id,
        ROUND(r.avg_rate_score, 2) AS rounded_avg_rate_score
    FROM (
        SELECT 
            dept_id, 
            course_id,
            AVG(rate_score) AS avg_rate_score,
            (
                SELECT COUNT(DISTINCT r1.course_id)
                FROM Rates r1
                WHERE r1.dept_id = r.dept_id AND AVG(r.rate_score) <= (
                    SELECT AVG(r2.rate_score)
                    FROM Rates r2
                    WHERE r2.dept_id = r1.dept_id AND r2.course_id = r1.course_id
                )
            ) AS ranking
        FROM Rates r
        GROUP BY dept_id, course_id
    ) r
    JOIN Departments d ON r.dept_id = d.dept_id
    WHERE r.ranking <= 3
    ORDER BY d.dept_id, r.avg_rate_score DESC;



-- Q15: Display the average GPA for each course each semester.

SELECT 
    c.course_name,
    s.sem_year,
    ROUND(AVG(s.stud_gpa), 2) AS avg_gpa,
    MAX(s.stud_gpa) AS max_gpa,
    MIN(s.stud_gpa) AS min_gpa
FROM 
    Study s
JOIN 
    Courses c ON s.dept_id = c.dept_id AND s.course_id = c.course_id
GROUP BY 
    c.course_name, s.sem_year
ORDER BY 
    c.course_name, s.sem_year;


-- Q16: compare the average GPA for each course between 2022F and 2023F

SELECT 
    s.dept_id, 
    c.course_id, 
    c.course_name,
    COALESCE(ROUND(AVG(CASE WHEN o.sem_year = '2022F' THEN s.stud_gpa END), 2), 0) AS avg_gpa_2022F,
    COALESCE(ROUND(AVG(CASE WHEN o.sem_year = '2023F' THEN s.stud_gpa END), 2), 0) AS avg_gpa_2023F
FROM 
    Study s
JOIN 
    Courses c ON s.dept_id = c.dept_id AND s.course_id = c.course_id
JOIN
    Offered_by o ON s.dept_id = o.dept_id AND s.course_id = o.course_id
GROUP BY 
    s.dept_id, 
    c.course_id,
    c.course_name
HAVING
            avg_gpa_2022F > 0 
            AND 
            avg_gpa_2023F > 0
ORDER BY 
    s.dept_id, 
    c.course_id;







-- Q17: Find threads and posts related to “study” tag names ordered by date.
SELECT DISTINCT T.thread_id, T.thread_title, P.post_id, P.post_content, P.post_timestamp
FROM Threads AS T
JOIN Categorize_by AS CB ON T.thread_id = CB.thread_id
JOIN Tags AS TG ON CB.tag_id = TG.tag_id
JOIN Posts AS P ON T.thread_id = P.thread_id
WHERE TG.tag_name LIKE '%study%'
ORDER BY P.post_timestamp ASC;




-- Q18: Query to compare the average gpa of students who posted in the threads with students who didn't post.

SELECT 
    X.AvgGpa_StudsWithNoPost,
    Y.AvgGpa_StudsWithPost
FROM
    (SELECT AVG(ST.stud_gpa) as AvgGpa_StudsWithNoPost
    FROM Students AS S
    LEFT JOIN Posts AS P ON S.stud_id = P.stud_id
	LEFT JOIN Threads AS T ON P.thread_id = T.thread_id
	LEFT JOIN Study AS ST ON S.stud_id = ST.stud_id
    WHERE P.stud_id IS NULL) AS X,
    (SELECT AVG(ST.stud_gpa) as AvgGpa_StudsWithPost
    FROM Students AS S
    LEFT JOIN Posts AS P ON S.stud_id = P.stud_id
	LEFT JOIN Threads AS T ON P.thread_id = T.thread_id
	LEFT JOIN Study AS ST ON S.stud_id = ST.stud_id) AS Y;





-- Q19: Write query to list all courses and their respective average ratings and students average gpas with standard deviation of GPAs, number of total posts made by students of that course.

SELECT
    C.course_id,
    C.course_name,
    ROUND(AVG(R.rate_score), 2) AS average_rating,
    ROUND(AVG(ST.stud_gpa), 2) AS average_gpa,
    ROUND(STDDEV(ST.stud_gpa), 2) AS gpa_standard_deviation,
    COUNT(P.stud_id) AS total_posts
FROM Courses AS C
LEFT JOIN Rates AS R ON C.course_id = R.course_id
LEFT JOIN Study AS ST ON C.course_id = ST.course_id
LEFT JOIN Posts AS P ON ST.stud_id = P.stud_id
GROUP BY C.course_id, C.course_name
HAVING 
    average_rating IS NOT NULL 
AND average_gpa IS NOT NULL 
AND gpa_standard_deviation IS NOT NULL 
AND total_posts IS NOT NULL;

-- Q20: Display the name of top student by course and show gpa also.
SELECT
    C.course_id,
    C.course_name,
    ST.sem_year,
    S.stud_fname,
    S.stud_lname,
    ST.stud_gpa
FROM Courses AS C
JOIN Study AS ST ON C.course_id = ST.course_id
JOIN Students AS S ON ST.stud_id = S.stud_id
WHERE (ST.course_id, ST.stud_gpa) IN (
    SELECT course_id, MAX(stud_gpa) 
    FROM Study 
    GROUP BY course_id
)
ORDER BY C.course_id, ST.sem_year;












